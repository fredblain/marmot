from subprocess import call

import marmot
from marmot.experiment.experiment_utils import import_function

# generate an additional representation
class RepresentationGenerator():
    
    # <function> - function used to extract representations
    # <data> - list of representations
    def __init__(self, function, data, *args):
        # function that will generate the representation
        # has to be of the format func( *data, *args ), where <data> - list of text files, <args> - list of other arguments
        self.func = import_function(function)
        # arguments of this function
        self.args = args
        # data needed for this function
        self.data = data if type(data) == list else [data]
        # files generated by <function> (they need to be removed afterwards)
        self.files = []

    # returns a pair (representation_label, representation_file), 
    # representation file should be sentence-aligned with target words
    def generate(self, data_obj):
        all_args = [ data_obj[d] for d in self.data ]
        all_args.extend(self.args)
        (label, file_name) = self.func( *all_args )
        self.files.append(file_name)
        return (label, file_name)

    def cleanup(self):
        for f in self.files:
            call(['rm', f])
